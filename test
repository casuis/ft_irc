#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <arpa/inet.h>

#define MAX_EVENTS 10

int main(int argc, char *argv[]) {
    int server_fd, client_fd, epoll_fd, event_count;
    struct sockaddr_in server_addr, client_addr;
    struct epoll_event event, events[MAX_EVENTS];

    // Création du socket serveur
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_addr.sin_port = htons(8080);
    bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr));
    listen(server_fd, 5);

    // Création de l'instance epoll
    epoll_fd = epoll_create1(0);
    if (epoll_fd == -1) {
        perror("epoll_create1");
        exit(EXIT_FAILURE);
    }

    // Ajout du socket serveur à l'instance epoll
    event.data.fd = server_fd;
    event.events = EPOLLIN;
    if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server_fd, &event) == -1) {
        perror("epoll_ctl EPOLL_CTL_ADD");
        exit(EXIT_FAILURE);
    }

    // Boucle d'événements epoll
    while (1) {
        event_count = epoll_wait(epoll_fd, events, MAX_EVENTS, -1);
        for (int i = 0; i < event_count; i++) {
            // Événement sur le socket serveur
            if (events[i].data.fd == server_fd) {
                // Accepter la connexion client
                socklen_t client_len = sizeof(client_addr);
                client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_len);
                if (client_fd == -1) {
                    perror("accept");
                    continue;
                }

                // Ajout du socket client à l'instance epoll
                event.data.fd = client_fd;
                event.events = EPOLLIN;
                if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_fd, &event) == -1) {
                    perror("epoll_ctl EPOLL_CTL_ADD");
                    exit(EXIT_FAILURE);
                }
                printf("Client connecté\n");
            }
            // Événement sur un socket client
            else {
                // Lecture des données du socket client
                char buffer[1024];
                int len = read(events[i].data.fd, buffer, sizeof(buffer));
                if (len == -1) {
                    perror("read");
                    exit(EXIT_FAILURE);
                }
                else if (len == 0) {
                    // Connexion fermée par le client
                    printf("Client déconnecté\n");
                    if (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, events[i].data.fd, NULL) == -1) {
                        perror("epoll_ctl EPOLL_CTL_DEL");
                        exit(EXIT_FAILURE);
                    }
                    close(events[i].data.fd);
                }
                else {
                    // Affichage des données reçues du client
                    buffer[len] = '\0';
                    printf("Données reçues : %s\n", buffer);
                }
            }
        }
    }

    close(server_fd);
    return 0;
}
